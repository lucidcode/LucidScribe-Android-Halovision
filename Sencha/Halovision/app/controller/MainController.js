/*
 * File: app/controller/MainController.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Halovision.controller.MainController', {
    extend: 'Ext.app.Controller',

    config: {
        LoadingAdvanced: '0',
        LoadingSettings: '0',

        refs: {
            AdvancedPanel: {
                autoCreate: true,
                selector: 'AdvancedPanel',
                xtype: 'AdvancedPanel'
            },
            CurrentPanel: {
                autoCreate: true,
                selector: 'CurrentPanel',
                xtype: 'CurrentPanel'
            },
            MainPanel: {
                autoCreate: true,
                selector: 'MainPanel',
                xtype: 'MainPanel'
            },
            SettingsPanel: {
                autoCreate: true,
                selector: 'SettingsPanel',
                xtype: 'SettingsPanel'
            }
        }
    },

    launch: function() {
        console.log('Launching Main Controller');

        Halovision.app.AccelerometerData = [];
        Halovision.app.DataID = 1;

        for (i = 1; i < 128; i++) {
            Halovision.app.AccelerometerData.push({
                'id': Halovision.app.DataID,
                'x': 0
            });
            Halovision.app.DataID++;
        }


        // Load the settings
        var task0 = Ext.create('Ext.util.DelayedTask', function() {    
            this.LoadSettings();
        }, this);
        task0.delay(1024);

        // Load the audio tracks
        var task = Ext.create('Ext.util.DelayedTask', function() {    
            this.LoadAudioTracks();
        }, this);
        task.delay(1024);

        // Load the free color
        var task2 = Ext.create('Ext.util.DelayedTask', function() {    
            this.LoadFreeColors();
        }, this);
        task2.delay(1024);

        // Load the free algorithms
        var task3 = Ext.create('Ext.util.DelayedTask', function() {    
            this.LoadFreeAlgorithms();
        }, this);
        task3.delay(1024);

        // Get the purchases from the store
        var task4 = Ext.create('Ext.util.DelayedTask', function() {    
            this.GetPurchases();
        }, this);
        task4.delay(1024);

        // Show the main screen
        var currentPanel = Halovision.app.getController('MainController').getCurrentPanel();
        this.getMainPanel().getComponent("NavigationView").push(currentPanel);

        var accelerometerStore = Ext.getStore('AccelerometerStore');
        accelerometerStore.setData(Halovision.app.AccelerometerData);
    },

    Watch: function() {
        console.log('Launching Watcher');

        // Get the settings
        var settingsStore = Ext.getStore('SettingsStore');
        settings = settingsStore.first();

        // Get the advanced settings
        var advancedStore = Ext.getStore('AdvancedStore');
        advanced = advancedStore.first();

        var track = settings.get('Track');
        if (advanced.get('Effects'))
        {
            track = "Lucid Scribe Trigger";
        }

        cordova.exec(
        function SuccessHandler (result) {        
            var task = Ext.create('Ext.util.DelayedTask', function() {  

                var accelerometerStore = Ext.getStore('AccelerometerStore');

                Halovision.app.DataID += 1;
                Halovision.app.AccelerometerData.push({
                    'id': Halovision.app.DataID,
                    'x': result.x
                });

                if (Halovision.app.AccelerometerData.length >= 128)
                {
                    Halovision.app.AccelerometerData.shift();
                }

                accelerometerStore.setData(Halovision.app.AccelerometerData);

            }, this);
            task.delay(1);


        },  
        function ErrorHandler (error) { 
            alert("Native call failed: " + error);
        },
        'HaloVisionPlugin', '', [settings.get('Algorithm'), settings.get('Amplification'), settings.get('PixelThreshold'), settings.get('PixelsInARow'), settings.get('FrameThreshold'), settings.get('Color'), track, settings.get('Researcher'), settings.get('Fullscreen')]);
    },

    ShowSettings: function() {
        console.log('Launching Settings');

        // Load the settings  
        Halovision.app.getController('MainController').LoadingSettings = 1;
        var settingsPanel = Halovision.app.getController('MainController').getSettingsPanel();
        settingsPanel.setRecord(this.LoadSettings());

        // Show the settings screen
        this.getMainPanel().getComponent("NavigationView").push(settingsPanel);
        Halovision.app.getController('MainController').LoadingSettings = 0;
    },

    ShowAdvanced: function() {
        console.log('Launching Advanced Settings');

        // Load the settings  
        Halovision.app.getController('MainController').LoadingAdvanced = 1;
        var advancedPanel = Halovision.app.getController('MainController').getAdvancedPanel();
        advancedPanel.setRecord(this.LoadAdvanced());

        // Show the settings screen
        this.getMainPanel().getComponent("NavigationView").push(advancedPanel);
        Halovision.app.getController('MainController').LoadingAdvanced = 0;
    },

    LoadSettings: function() {
        console.log('Loading settings');

        var settings = Ext.create('Halovision.model.SettingsModel', {
            Researcher: 'anonymous',
            Track: 'Prodigy - Voodoo People',
            Color: 'White',
            Effect: 'Pixelate',
            Algorithm: 'Motion Detector',
            Fullscreen: true,
            Amplification: 32,
            PixelThreshold: 16,
            PixelsInARow: 4,
            FrameThreshold: 600
        });

        try {

            // Grab settings from store and if not avail then create new one
            var settingsStore = Ext.getStore('SettingsStore');

            // If nothing in store then add initial values
            if (settingsStore.first() === undefined)
            {
                console.log('creating new settings record');
                settingsStore.add(settings);
                settingsStore.sync();
            }
            settings = settingsStore.first();
        }
        catch (ex)
        {
            console.log('EXCEPTION: ' + ex.message);
        }

        return settings;
    },

    LoadAdvanced: function() {
        console.log('Loading advanced settings');

        var advanced = Ext.create('Halovision.model.AdvancedModel', {
            Colors: 0,
            Tracks: 0,
            Effects: 0,
            Logs: 0,
            Exports: 0
        });

        try {

            // Grab settings from store and if not avail then create new one
            var advancedStore = Ext.getStore('AdvancedStore');

            // If nothing in store then add initial values
            if (advancedStore.first() === undefined)
            {
                console.log('creating new settings record');
                advancedStore.add(advanced);
                advancedStore.sync();
            }
            advanced = advancedStore.first();
        }
        catch (ex)
        {
            console.log('EXCEPTION: ' + ex.message);
        }

        return advanced;
    },

    LoadAudioTracks: function() {
        console.log('Loading audio tracks');

        try {

            // Grab settings from store and if not avail then create new one
            var audioStore = Ext.getStore('AudioTrackStore');

            // If nothing in store then add initial values
            if (audioStore.first() === undefined)
            {
                console.log('creating new audio records');

                audioStore.add(Ext.create('Halovision.model.AudioTrackModel', {
                    Track: 'Astral Projection - People Can Fly',
                Path: 'Astral Projection - People Can Fly.mp3'}));

                audioStore.add(Ext.create('Halovision.model.AudioTrackModel', {
                    Track: 'DT8 Project – Breathe',
                Path: 'DT8 Project – Breathe.mp3'}));

                audioStore.add(Ext.create('Halovision.model.AudioTrackModel', {
                    Track: 'Lange - Follow Me',
                Path: 'Lange - Follow Me.mp3'}));

                audioStore.add(Ext.create('Halovision.model.AudioTrackModel', {
                    Track: 'Kai Tracid - Trance And Acid',
                Path: 'Kai Tracid - Trance And Acid.mp3'}));

                audioStore.add(Ext.create('Halovision.model.AudioTrackModel', {
                    Track: 'Prodigy - Voodoo People',
                Path: 'Prodigy - Voodoo People.mp3'}));

                audioStore.sync();
            }
        }
        catch (ex)
        {
            console.log('EXCEPTION: ' + ex.message);
        }
    },

    LoadFreeColors: function() {
        console.log('Loading color store');

        try {

            // Grab settings from store and if not avail then create new one
            var colorStore = Ext.getStore('ColorStore');

            // If nothing in store then add initial values
            if (colorStore.first() === undefined)
            {
                console.log('Creating color store');
                colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'White'}));
                colorStore.sync();
            }
        }
        catch (ex)
        {
            console.log('EXCEPTION: ' + ex.message);
        }
    },

    LoadPurchasedColors: function() {
        // Grab settings from store and if not avail then create new one
        var colorStore = Ext.getStore('ColorStore');
        if (colorStore.getCount() == 1)
        {
            console.log('Adding colors');

            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'AliceBlue'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'AntiqueWhite'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Aqua'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Aquamarine'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Azure'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Beige'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Bisque'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Black'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'BlanchedAlmond'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Blue'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'BlueViolet'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Brown'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'BurlyWood'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'CadetBlue'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Chartreuse'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Chocolate'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Coral'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'CornflowerBlue'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Cornsilk'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Crimson'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Cyan'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'DarkBlue'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'DarkCyan'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'DarkGoldenrod'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'DarkGray'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'DarkGreen'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'DarkKhaki'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'DarkMagenta'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'DarkOliveGreen'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'DarkOrange'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'DarkOrchid'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'DarkRed'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'DarkSalmon'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'DarkSeaGreen'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'DarkSlateBlue'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'DarkSlateGray'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'DarkTurquoise'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'DarkViolet'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'DeepPink'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'DeepSkyBlue'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'DimGray'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'DodgerBlue'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Firebrick'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'FloralWhite'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'ForestGreen'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Fuchsia'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Gainsboro'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'GhostWhite'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Gold'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Goldenrod'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Gray'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Green'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'GreenYellow'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Honeydew'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'HotPink'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'IndianRed'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Indigo'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Ivory'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Khaki'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Lavender'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'LavenderBlush'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'LawnGreen'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'LemonChiffon'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'LightBlue'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'LightCoral'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'LightCyan'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'LightGoldenrodYellow'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'LightGreen'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'LightGray'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'LightPink'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'LightSalmon'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'LightSeaGreen'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'LightSkyBlue'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'LightSlateGray'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'LightSteelBlue'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'LightYellow'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Lime'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'LimeGreen'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Linen'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Magenta'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Maroon'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'MediumAquamarine'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'MediumBlue'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'MediumOrchid'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'MediumPurple'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'MediumSeaGreen'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'MediumSlateBlue'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'MediumSpringGreen'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'MediumTurquoise'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'MediumVioletRed'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'MidnightBlue'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'MintCream'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'MistyRose'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Moccasin'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'NavajoWhite'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Navy'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'OldLace'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Olive'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'OliveDrab'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Orange'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'OrangeRed'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Orchid'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'PaleGoldenrod'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'PaleGreen'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'PaleTurquoise'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'PaleVioletRed'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'PapayaWhip'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'PeachPuff'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Peru'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Pink'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Plum'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'PowderBlue'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Purple'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Red'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'RosyBrown'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'RoyalBlue'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'SaddleBrown'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Salmon'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'SandyBrown'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'SeaGreen'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'SeaShell'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Sienna'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Silver'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'SkyBlue'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'SlateBlue'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'SlateGray'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Snow'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'SpringGreen'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'SteelBlue'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Tan'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Teal'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Thistle'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Tomato'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Turquoise'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Violet'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Wheat'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'WhiteSmoke'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'Yellow'}));
            colorStore.add(Ext.create('Halovision.model.ColorModel', {name: 'YellowGreen'}));

            colorStore.sync();
        }
    },

    LoadFreeAlgorithms: function() {
        console.log('Loading algorithm store');

        try {

            // Grab settings from store and if not avail then create new one
            var algorithmStore = Ext.getStore('AlgorithmStore');

            // If nothing in store then add initial values
            if (algorithmStore.first() === undefined)
            {
                console.log('Creating algorithm store');
                algorithmStore.add(Ext.create('Halovision.model.AlgorithmModel', {name: 'REM Detector'}));
                algorithmStore.add(Ext.create('Halovision.model.AlgorithmModel', {name: 'Motion Detector'}));
                algorithmStore.sync();
            }
        }
        catch (ex)
        {
            console.log('EXCEPTION: ' + ex.message);
        }
    },

    SaveSettings: function() {
        if (Halovision.app.getController('MainController').LoadingSettings === 1)
        {
            console.log('not saving settings');
            return;
        }

        console.log('Saving settings');

        var settingsPanel = Halovision.app.getController('MainController').getSettingsPanel();
        var settings = settingsPanel.getRecord();

        //Check to see if record set on form, if not then exit
        if (settings === null) {
            console.log('could not find settings - aborting');
            return;
        }

        //Now grab values from the form and save them
        var newValues = settingsPanel.getValues();

        // Update the current note's fields with form values.
        settings.set('Researcher', newValues.Researcher);
        settings.set('Track', newValues.Track);
        settings.set('Color', newValues.Color);
        settings.set('Algorithm', newValues.Algorithm);
        settings.set('Fullscreen', newValues.Fullscreen);
        settings.set('PixelThreshold', newValues.PixelThreshold);
        settings.set('FrameThreshold', newValues.FrameThreshold);

        var errors = settings.validate();
        if (!errors.isValid()) {
            Ext.Msg.alert('Save Settings Error!',errors.getByField('title')[0].getMessage(), Ext.emptyFn);
            settings.reject();
            return; 
        }

        var store = Ext.getStore('SettingsStore');

        store.sync();
    },

    GetPurchases: function() {
        console.log('Getting Purchases');

        cordova.exec(
        function SuccessHandler (result) {        
            var task = Ext.create('Ext.util.DelayedTask', function() {

                if (result.Command === "Purchases")
                {
                    var advanced = Ext.create('Halovision.model.AdvancedModel', {
                        Colors: 0,
                        Tracks: 0,
                        Effects: 0,
                        Logs: 0,
                        Exports: 0
                    });

                    // Grab settings from store and if not avail then create new one
                    var advancedStore = Ext.getStore('AdvancedStore');

                    // If nothing in store then add initial values
                    if (advancedStore.first() === undefined)
                    {
                        console.log('creating new settings record');
                        advancedStore.add(advanced);
                        advancedStore.sync();
                    }
                    advanced = advancedStore.first();

                    // Update the current fields with purchase values.
                    advanced.set('Colors', result.Colors);
                    if (result.Colors === 1)
                    {
                        Halovision.app.getController("MainController").LoadPurchasedColors();
                    }
                    advancedStore.sync();
                }

            }, this);
            task.delay(1);


        },  
        function ErrorHandler (error) { 
            Ext.Msg.alert('Error!', error, Ext.emptyFn);
        },
        'LucidScribeStorePlugin', '', ["GetPurchases"]);
    },

    Purchase: function(objectSKU) {
        if (Halovision.app.getController('MainController').LoadingAdvanced === 1)
        {
            console.log('not purchasing');
            return;
        }

        console.log('Purchasing ' + objectSKU);

        cordova.exec(
        function SuccessHandler (result) {  
            if (result.Command === "NewPurchase")
            {
                if (result.ObjectSKU === "Colors")
                {
                    Halovision.app.getController("MainController").PurchaseColors();
                }
                else if (result.ObjectSKU === "User canceled")
                {
                    Halovision.app.getController("MainController").getMainPanel().getComponent("NavigationView").pop();
                }
            }
        },  
        function ErrorHandler (error) { 
            Ext.Msg.alert('Error!', error, Ext.emptyFn);
            Halovision.app.getController("MainController").getMainPanel().getComponent("NavigationView").pop();
        },
        'LucidScribeStorePlugin', '', ["Purchase", objectSKU]);
    },

    PurchaseColors: function() {
        Halovision.app.getController("MainController").LoadPurchasedColors();

        console.log('Saving advanced settings');

        var advanced = Ext.create('Halovision.model.AdvancedModel', {
            Colors: 0,
            Tracks: 0,
            Effects: 0,
            Logs: 0,
            Exports: 0
        });

        // Grab settings from store and if not avail then create new one
        var advancedStore = Ext.getStore('AdvancedStore');

        // If nothing in store then add initial values
        if (advancedStore.first() === undefined)
        {
            console.log('creating new settings record');
            advancedStore.add(advanced);
            advancedStore.sync();
        }
        advanced = advancedStore.first();
        advanced.set('Colors', 1);

        advancedStore.sync();
        Ext.Msg.alert('Colors Purchased!', "Thank you for contributing to the search for lucidity.", Ext.emptyFn);
    },

    Consume: function() {
        cordova.exec(
        function SuccessHandler (result) {        
            if (result.Command === "Consume")
            {
                Ext.Msg.alert('Consumed!', "Colors", Ext.emptyFn);
            }
        },  
        function ErrorHandler (error) { 
            Ext.Msg.alert('Error!', error, Ext.emptyFn);
            Halovision.app.getController("MainController").getMainPanel().getComponent("NavigationView").pop();
        },
        'LucidScribeStorePlugin', '', ["Consume"]);
    }

});