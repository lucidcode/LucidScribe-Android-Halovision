/*
 * File: app/view/SettingsPanel.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Halovision.view.SettingsPanel', {
    extend: 'Ext.form.Panel',
    alias: 'widget.SettingsPanel',

    config: {
        title: 'Settings',
        id: 'SettingsPanel',
        layout: {
            type: 'vbox'
        },
        scrollable: 'vertical',
        items: [
            {
                xtype: 'fieldset',
                items: [
                    {
                        xtype: 'textfield',
                        itemId: 'ResearcherField',
                        label: 'Researcher',
                        labelWidth: '40%',
                        name: 'Researcher'
                    },
                    {
                        xtype: 'selectfield',
                        itemId: 'TrackField',
                        label: 'Audio Track',
                        labelWidth: '40%',
                        name: 'Track',
                        displayField: 'Track',
                        store: 'AudioTrackStore',
                        valueField: 'Path'
                    },
                    {
                        xtype: 'selectfield',
                        itemId: 'ColorField',
                        label: 'Color',
                        labelWidth: '40%',
                        name: 'Color',
                        displayField: 'name',
                        store: 'ColorStore',
                        valueField: 'name'
                    },
                    {
                        xtype: 'checkboxfield',
                        itemId: 'FullScreenField',
                        label: 'Fullscreen',
                        labelWidth: '40%',
                        name: 'Fullscreen'
                    },
                    {
                        xtype: 'selectfield',
                        itemId: 'AlgorithmField',
                        label: 'Algorithm',
                        labelWidth: '40%',
                        name: 'Algorithm',
                        displayField: 'name',
                        store: 'AlgorithmStore',
                        valueField: 'name'
                    }
                ]
            },
            {
                xtype: 'fieldset',
                items: [
                    {
                        xtype: 'spinnerfield',
                        itemId: 'AmplificationField',
                        label: 'Amplification',
                        labelWidth: '50%',
                        name: 'Amplification',
                        value: 20,
                        maxValue: 255,
                        minValue: 1,
                        stepValue: 1
                    },
                    {
                        xtype: 'spinnerfield',
                        itemId: 'PixelThresholdField',
                        label: 'Pixel Threshold',
                        labelWidth: '50%',
                        name: 'PixelThreshold',
                        value: 20,
                        maxValue: 255,
                        minValue: 1,
                        stepValue: 1
                    },
                    {
                        xtype: 'spinnerfield',
                        itemId: 'PixelsInARowField',
                        label: 'Pixels in a Row',
                        labelWidth: '50%',
                        name: 'PixelsInARow',
                        value: 20,
                        maxValue: 32,
                        minValue: 1,
                        stepValue: 1
                    },
                    {
                        xtype: 'spinnerfield',
                        itemId: 'FrameThresholdField',
                        label: 'Frame Threshold',
                        labelWidth: '50%',
                        name: 'FrameThreshold',
                        value: 800,
                        maxValue: 1000,
                        minValue: 1,
                        stepValue: 10
                    }
                ]
            },
            {
                xtype: 'toolbar',
                docked: 'bottom',
                layout: {
                    pack: 'justify',
                    type: 'hbox'
                },
                items: [
                    {
                        xtype: 'button',
                        id: 'WatchButton1',
                        itemId: 'mybutton',
                        iconCls: 'time',
                        text: 'Monitor'
                    },
                    {
                        xtype: 'button',
                        id: 'SettingsButton1',
                        iconCls: 'settings',
                        text: 'Advanced'
                    }
                ]
            }
        ],
        listeners: [
            {
                fn: 'onResearcherFieldKeyup',
                event: 'keyup',
                delegate: '#ResearcherField'
            },
            {
                fn: 'onTrackChange',
                event: 'change',
                delegate: '#TrackField'
            },
            {
                fn: 'onColorFieldChange',
                event: 'change',
                delegate: '#ColorField'
            },
            {
                fn: 'onFullScreenFieldChange',
                event: 'change',
                delegate: '#FullScreenField'
            },
            {
                fn: 'onAlgorithmFieldChange',
                event: 'change',
                delegate: '#AlgorithmField'
            },
            {
                fn: 'onAmplificationFieldChange',
                event: 'change',
                delegate: '#AmplificationField'
            },
            {
                fn: 'onPixelThresholdFieldChange',
                event: 'change',
                delegate: '#PixelThresholdField'
            },
            {
                fn: 'onPixelsInARowFieldChange',
                event: 'change',
                delegate: '#PixelsInARowField'
            },
            {
                fn: 'onFrameThresholdFieldChange',
                event: 'change',
                delegate: '#FrameThresholdField'
            },
            {
                fn: 'onWatchButtonTap1',
                event: 'tap',
                delegate: '#WatchButton1'
            },
            {
                fn: 'onAdvancedButtonTap',
                event: 'tap',
                delegate: '#SettingsButton1'
            }
        ]
    },

    onResearcherFieldKeyup: function(textfield, e, eOpts) {
        Halovision.app.getController("MainController").SaveSettings();
    },

    onTrackChange: function(selectfield, newValue, oldValue, eOpts) {
        Halovision.app.getController("MainController").SaveSettings();
    },

    onColorFieldChange: function(selectfield, newValue, oldValue, eOpts) {
        Halovision.app.getController("MainController").SaveSettings();
    },

    onFullScreenFieldChange: function(checkboxfield, newValue, oldValue, eOpts) {
        Halovision.app.getController("MainController").SaveSettings();
    },

    onAlgorithmFieldChange: function(selectfield, newValue, oldValue, eOpts) {
        Halovision.app.getController("MainController").SaveSettings();
    },

    onAmplificationFieldChange: function(textfield, newValue, oldValue, eOpts) {
        Halovision.app.getController("MainController").SaveSettings();
    },

    onPixelThresholdFieldChange: function(textfield, newValue, oldValue, eOpts) {
        Halovision.app.getController("MainController").SaveSettings();
    },

    onPixelsInARowFieldChange: function(textfield, newValue, oldValue, eOpts) {
        Halovision.app.getController("MainController").SaveSettings();
    },

    onFrameThresholdFieldChange: function(textfield, newValue, oldValue, eOpts) {
        Halovision.app.getController("MainController").SaveSettings();
    },

    onWatchButtonTap1: function(button, e, eOpts) {
        Halovision.app.getController("MainController").Watch();
    },

    onAdvancedButtonTap: function(button, e, eOpts) {
        Halovision.app.getController("MainController").ShowAdvanced();
    }

});